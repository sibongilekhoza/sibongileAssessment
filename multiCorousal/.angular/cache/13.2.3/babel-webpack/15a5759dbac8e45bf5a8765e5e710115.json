{"ast":null,"code":"import { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\nconst _c0 = [\"input\"];\nconst _c1 = [\"thumb\"];\nconst _c2 = [\"thumbValue\"];\n\nconst _c3 = function (a0) {\n  return {\n    \"thumb-active\": a0\n  };\n};\n\nconst RANGE_VALUE_ACCESOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => MdbRangeComponent),\n  multi: true\n};\nlet MdbRangeComponent = /*#__PURE__*/(() => {\n  class MdbRangeComponent {\n    constructor(_cdRef) {\n      this._cdRef = _cdRef;\n      this.min = 0;\n      this.max = 100;\n      this.rangeValueChange = new EventEmitter();\n      this.visibility = false; // Control Value Accessor Methods\n\n      this.onChange = _ => {};\n\n      this.onTouched = () => {};\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    get default() {\n      return this._default;\n    }\n\n    set default(value) {\n      this._default = value;\n    }\n\n    onchange(event) {\n      this.onChange(event.target.value);\n    }\n\n    onInput() {\n      this.rangeValueChange.emit({\n        value: this.value\n      });\n      this.focusRangeInput();\n    }\n\n    ngAfterViewInit() {\n      this.thumbPositionUpdate();\n    }\n\n    focusRangeInput() {\n      this.input.nativeElement.focus();\n      this.visibility = true;\n    }\n\n    blurRangeInput() {\n      this.input.nativeElement.blur();\n      this.visibility = false;\n    }\n\n    thumbPositionUpdate() {\n      const rangeInput = this.input.nativeElement;\n      const inputValue = rangeInput.value;\n      const minValue = rangeInput.min ? rangeInput.min : 0;\n      const maxValue = rangeInput.max ? rangeInput.max : 100;\n      const newValue = Number((inputValue - minValue) * 100 / (maxValue - minValue));\n      this.value = inputValue;\n      this.thumbStyle = {\n        left: `calc(${newValue}% + (${8 - newValue * 0.15}px))`\n      };\n    }\n\n    writeValue(value) {\n      this.value = value;\n\n      this._cdRef.markForCheck();\n\n      setTimeout(() => {\n        this.thumbPositionUpdate();\n      }, 0);\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n  }\n\n  MdbRangeComponent.ɵfac = function MdbRangeComponent_Factory(t) {\n    return new (t || MdbRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MdbRangeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbRangeComponent,\n    selectors: [[\"mdb-range\"]],\n    viewQuery: function MdbRangeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thumb = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thumbValue = _t.first);\n      }\n    },\n    hostBindings: function MdbRangeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function MdbRangeComponent_change_HostBindingHandler($event) {\n          return ctx.onchange($event);\n        })(\"input\", function MdbRangeComponent_input_HostBindingHandler() {\n          return ctx.onInput();\n        });\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      disabled: \"disabled\",\n      default: \"default\",\n      value: \"value\",\n      id: \"id\",\n      required: \"required\",\n      name: \"name\",\n      label: \"label\",\n      step: \"step\",\n      defaultRangeCounterClass: \"defaultRangeCounterClass\"\n    },\n    outputs: {\n      rangeValueChange: \"rangeValueChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([RANGE_VALUE_ACCESOR])],\n    decls: 10,\n    vars: 15,\n    consts: [[\"for\", \"id\", 1, \"form-label\"], [1, \"range\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"5\", 1, \"form-range\", 3, \"name\", \"disabled\", \"id\", \"min\", \"max\", \"step\", \"value\", \"ngModel\", \"ngModelChange\", \"input\", \"blur\", \"mousedown\", \"mouseup\", \"touchstart\", \"touchend\"], [\"input\", \"\"], [1, \"thumb\", 3, \"ngStyle\", \"ngClass\"], [\"thumb\", \"\"], [1, \"thumb-value\"], [\"thumbValue\", \"\"]],\n    template: function MdbRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function MdbRangeComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.value = $event;\n        })(\"input\", function MdbRangeComponent_Template_input_input_3_listener() {\n          return ctx.thumbPositionUpdate();\n        })(\"blur\", function MdbRangeComponent_Template_input_blur_3_listener() {\n          return ctx.blurRangeInput();\n        })(\"mousedown\", function MdbRangeComponent_Template_input_mousedown_3_listener() {\n          return ctx.focusRangeInput();\n        })(\"mouseup\", function MdbRangeComponent_Template_input_mouseup_3_listener() {\n          return ctx.blurRangeInput();\n        })(\"touchstart\", function MdbRangeComponent_Template_input_touchstart_3_listener() {\n          return ctx.focusRangeInput();\n        })(\"touchend\", function MdbRangeComponent_Template_input_touchend_3_listener() {\n          return ctx.blurRangeInput();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"span\", 4, 5);\n        ɵngcc0.ɵɵelementStart(7, \"span\", 6, 7);\n        ɵngcc0.ɵɵtext(9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.label);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"name\", ctx.name)(\"disabled\", ctx.disabled)(\"id\", ctx.id)(\"min\", ctx.min)(\"max\", ctx.max)(\"step\", ctx.step)(\"value\", ctx.value)(\"ngModel\", ctx.value)(\"id\", ctx.id);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.thumbStyle)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(13, _c3, ctx.visibility));\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵtextInterpolate(ctx.value);\n      }\n    },\n    directives: [ɵngcc1.RangeValueAccessor, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.NgStyle, ɵngcc2.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MdbRangeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbRangeModule = /*#__PURE__*/(() => {\n  class MdbRangeModule {}\n\n  MdbRangeModule.ɵfac = function MdbRangeModule_Factory(t) {\n    return new (t || MdbRangeModule)();\n  };\n\n  MdbRangeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbRangeModule\n  });\n  MdbRangeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return MdbRangeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbRangeModule, {\n    declarations: function () {\n      return [MdbRangeComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [MdbRangeComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbRangeComponent, MdbRangeModule, RANGE_VALUE_ACCESOR as ɵa }; //# sourceMappingURL=mdb-angular-ui-kit-range.js.map","map":null,"metadata":{},"sourceType":"module"}