{"ast":null,"code":"import { Directive, EventEmitter, Component, ChangeDetectionStrategy, ElementRef, ViewContainerRef, ChangeDetectorRef, ViewChild, ContentChild, Input, Output, NgModule } from '@angular/core';\nimport { OverlayConfig, Overlay, OverlayPositionBuilder, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/layout';\nconst _c0 = [\"dropdownTemplate\"];\nconst _c1 = [\"mdbDropdown\", \"\"];\n\nfunction MdbDropdownDirective_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵlistener(\"@fade.done\", function MdbDropdownDirective_ng_template_2_Template_div_animation_fade_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onAnimationEnd($event);\n    });\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@fade\", ctx_r1._animationState)(\"@.disabled\", !ctx_r1.animation);\n  }\n}\n\nconst _c2 = [\"*\", [[\"\", 8, \"dropdown-toggle\"]], [[\"\", 8, \"dropdown-menu\"]]];\nconst _c3 = [\"*\", \".dropdown-toggle\", \".dropdown-menu\"];\nlet MdbDropdownToggleDirective = /*#__PURE__*/(() => {\n  class MdbDropdownToggleDirective {\n    constructor() {}\n\n  }\n\n  MdbDropdownToggleDirective.ɵfac = function MdbDropdownToggleDirective_Factory(t) {\n    return new (t || MdbDropdownToggleDirective)();\n  };\n\n  MdbDropdownToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbDropdownToggleDirective,\n    selectors: [[\"\", \"mdbDropdownToggle\", \"\"]],\n    exportAs: [\"mdbDropdownToggle\"]\n  });\n  return MdbDropdownToggleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // eslint-disable-next-line @angular-eslint/component-class-suffix\n\n\nlet MdbDropdownMenuDirective = /*#__PURE__*/(() => {\n  class MdbDropdownMenuDirective {\n    constructor() {}\n\n  }\n\n  MdbDropdownMenuDirective.ɵfac = function MdbDropdownMenuDirective_Factory(t) {\n    return new (t || MdbDropdownMenuDirective)();\n  };\n\n  MdbDropdownMenuDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbDropdownMenuDirective,\n    selectors: [[\"\", \"mdbDropdownMenu\", \"\"]],\n    exportAs: [\"mdbDropdownMenu\"]\n  });\n  return MdbDropdownMenuDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // eslint-disable-next-line @angular-eslint/component-class-suffix\n\n\nlet MdbDropdownDirective = /*#__PURE__*/(() => {\n  class MdbDropdownDirective {\n    constructor(_overlay, _overlayPositionBuilder, _elementRef, _vcr, _breakpointObserver, _cdRef) {\n      this._overlay = _overlay;\n      this._overlayPositionBuilder = _overlayPositionBuilder;\n      this._elementRef = _elementRef;\n      this._vcr = _vcr;\n      this._breakpointObserver = _breakpointObserver;\n      this._cdRef = _cdRef;\n      this._animation = true;\n      this.offset = 0;\n      this.closeOnOutsideClick = true;\n      this.closeOnItemClick = true;\n      this.closeOnEsc = true;\n      this.dropdownShow = new EventEmitter();\n      this.dropdownShown = new EventEmitter();\n      this.dropdownHide = new EventEmitter();\n      this.dropdownHidden = new EventEmitter();\n      this._open = false;\n      this._breakpoints = {\n        isSm: this._breakpointObserver.isMatched('(min-width: 576px)'),\n        isMd: this._breakpointObserver.isMatched('(min-width: 768px)'),\n        isLg: this._breakpointObserver.isMatched('(min-width: 992px)'),\n        isXl: this._breakpointObserver.isMatched('(min-width: 1200px)'),\n        isXxl: this._breakpointObserver.isMatched('(min-width: 1400px)')\n      };\n      this._destroy$ = new Subject();\n      this._animationState = 'hidden';\n    }\n\n    get animation() {\n      return this._animation;\n    }\n\n    set animation(value) {\n      this._animation = coerceBooleanProperty(value);\n    }\n\n    ngAfterContentInit() {\n      this._bindDropdownToggleClick();\n    }\n\n    ngOnDestroy() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n\n        this._overlayRef.dispose();\n      }\n\n      this._destroy$.next();\n\n      this._destroy$.complete();\n    }\n\n    _bindDropdownToggleClick() {\n      fromEvent(this._dropdownToggle.nativeElement, 'click').pipe(takeUntil(this._destroy$)).subscribe(() => this.toggle());\n    }\n\n    _createOverlayConfig() {\n      return new OverlayConfig({\n        hasBackdrop: false,\n        scrollStrategy: this._overlay.scrollStrategies.reposition(),\n        positionStrategy: this._createPositionStrategy()\n      });\n    }\n\n    _createOverlay() {\n      this._overlayRef = this._overlay.create(this._createOverlayConfig());\n    }\n\n    _createPositionStrategy() {\n      const positionStrategy = this._overlayPositionBuilder.flexibleConnectedTo(this._dropdownToggle).withPositions(this._getPosition()).withFlexibleDimensions(false);\n\n      return positionStrategy;\n    }\n\n    _getPosition() {\n      this._isDropUp = this._elementRef.nativeElement.classList.contains('dropup');\n      this._isDropStart = this._elementRef.nativeElement.classList.contains('dropstart');\n      this._isDropEnd = this._elementRef.nativeElement.classList.contains('dropend');\n      this._isDropdownMenuEnd = this._dropdownMenu.nativeElement.classList.contains('dropdown-menu-end');\n      this._xPosition = this._isDropdownMenuEnd ? 'end' : 'start';\n      const regex = new RegExp(/dropdown-menu-(sm|md|lg|xl|xxl)-(start|end)/, 'g');\n\n      const responsiveClass = this._dropdownMenu.nativeElement.className.match(regex);\n\n      if (responsiveClass) {\n        this._subscribeBrakpoints();\n\n        const positionRegex = new RegExp(/start|end/, 'g');\n        const breakpointRegex = new RegExp(/(sm|md|lg|xl|xxl)/, 'g');\n        const dropdownPosition = positionRegex.exec(responsiveClass)[0];\n        const breakpoint = breakpointRegex.exec(responsiveClass)[0];\n\n        switch (true) {\n          case breakpoint === 'xxl' && this._breakpoints.isXxl:\n            this._xPosition = dropdownPosition;\n            break;\n\n          case breakpoint === 'xl' && this._breakpoints.isXl:\n            this._xPosition = dropdownPosition;\n            break;\n\n          case breakpoint === 'lg' && this._breakpoints.isLg:\n            this._xPosition = dropdownPosition;\n            break;\n\n          case breakpoint === 'md' && this._breakpoints.isMd:\n            this._xPosition = dropdownPosition;\n            break;\n\n          case breakpoint === 'sm' && this._breakpoints.isSm:\n            this._xPosition = dropdownPosition;\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      let position;\n      const positionDropup = {\n        originX: this._xPosition,\n        originY: 'top',\n        overlayX: this._xPosition,\n        overlayY: 'bottom',\n        offsetY: -this.offset\n      };\n      const positionDropdown = {\n        originX: this._xPosition,\n        originY: 'bottom',\n        overlayX: this._xPosition,\n        overlayY: 'top',\n        offsetY: this.offset\n      };\n      const positionDropstart = {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'top',\n        offsetX: this.offset\n      };\n      const positionDropend = {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX: -this.offset\n      };\n\n      switch (true) {\n        case this._isDropEnd:\n          position = [positionDropend, positionDropstart];\n          break;\n\n        case this._isDropStart:\n          position = [positionDropstart, positionDropend];\n          break;\n\n        case this._isDropUp:\n          position = [positionDropup, positionDropdown];\n          break;\n\n        default:\n          position = [positionDropdown, positionDropup];\n          break;\n      }\n\n      return position;\n    }\n\n    _listenToEscKeyup(overlayRef) {\n      return fromEvent(document, 'keyup').pipe(filter(event => event.key === 'Escape'), takeUntil(overlayRef.detachments()));\n    }\n\n    _listenToClick(overlayRef, origin) {\n      return fromEvent(document, 'click').pipe(filter(event => {\n        const target = event.target;\n\n        const isInsideMenu = this._dropdownMenu.nativeElement.contains(target);\n\n        const notTogglerIcon = !this._dropdownToggle.nativeElement.contains(target);\n        const notCustomContent = !isInsideMenu || target.classList && target.classList.contains('dropdown-item');\n        const notOrigin = target !== origin;\n        return notOrigin && notTogglerIcon && notCustomContent;\n      }), takeUntil(overlayRef.detachments()));\n    }\n\n    onAnimationEnd(event) {\n      if (event.fromState === 'visible' && event.toState === 'hidden') {\n        this._overlayRef.detach();\n\n        this._open = false;\n        this.dropdownHidden.emit(this);\n      }\n\n      if (event.fromState === 'hidden' && event.toState === 'visible') {\n        this.dropdownShown.emit(this);\n      }\n    }\n\n    _subscribeBrakpoints() {\n      const brakpoints = ['(min-width: 576px)', '(min-width: 768px)', '(min-width: 992px)', '(min-width: 1200px)', '(min-width: 1400px)'];\n      this._breakpointSubscription = this._breakpointObserver.observe(brakpoints).pipe(takeUntil(this._destroy$)).subscribe(result => {\n        Object.keys(this._breakpoints).forEach((key, index) => {\n          const brakpointValue = brakpoints[index];\n          const newBreakpoint = result.breakpoints[brakpointValue];\n          const isBreakpointChanged = newBreakpoint !== this._breakpoints[key];\n\n          if (!isBreakpointChanged) {\n            return;\n          }\n\n          this._breakpoints[key] = newBreakpoint;\n\n          if (this._open) {\n            this._overlayRef.updatePositionStrategy(this._createPositionStrategy());\n          }\n        });\n      });\n    }\n\n    show() {\n      this._cdRef.markForCheck();\n\n      if (this._open) {\n        return;\n      }\n\n      if (!this._overlayRef) {\n        this._createOverlay();\n      }\n\n      this._portal = new TemplatePortal(this._template, this._vcr);\n      this.dropdownShow.emit(this);\n      this._open = true;\n\n      this._overlayRef.attach(this._portal);\n\n      this._listenToEscKeyup(this._overlayRef).subscribe(isEsc => {\n        if (isEsc && this.closeOnEsc) {\n          this.hide();\n        }\n      });\n\n      this._listenToClick(this._overlayRef, this._dropdownToggle.nativeElement).subscribe(event => {\n        const target = event.target;\n        const isDropdownItem = target.classList && target.classList.contains('dropdown-item');\n\n        if (this.closeOnItemClick && isDropdownItem) {\n          this.hide();\n          return;\n        }\n\n        if (this.closeOnOutsideClick && !isDropdownItem) {\n          this.hide();\n          return;\n        }\n      });\n\n      this._animationState = 'visible';\n    }\n\n    hide() {\n      this._cdRef.markForCheck();\n\n      if (!this._open) {\n        return;\n      }\n\n      this.dropdownHide.emit(this);\n      this._animationState = 'hidden';\n    }\n\n    toggle() {\n      this._cdRef.markForCheck();\n\n      if (this._open) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n\n  }\n\n  MdbDropdownDirective.ɵfac = function MdbDropdownDirective_Factory(t) {\n    return new (t || MdbDropdownDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OverlayPositionBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BreakpointObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MdbDropdownDirective.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbDropdownDirective,\n    selectors: [[\"\", \"mdbDropdown\", \"\"]],\n    contentQueries: function MdbDropdownDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdbDropdownToggleDirective, 5, ElementRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdbDropdownMenuDirective, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._dropdownToggle = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._dropdownMenu = _t.first);\n      }\n    },\n    viewQuery: function MdbDropdownDirective_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._template = _t.first);\n      }\n    },\n    inputs: {\n      offset: \"offset\",\n      closeOnOutsideClick: \"closeOnOutsideClick\",\n      closeOnItemClick: \"closeOnItemClick\",\n      closeOnEsc: \"closeOnEsc\",\n      animation: \"animation\"\n    },\n    outputs: {\n      dropdownShow: \"dropdownShow\",\n      dropdownShown: \"dropdownShown\",\n      dropdownHide: \"dropdownHide\",\n      dropdownHidden: \"dropdownHidden\"\n    },\n    attrs: _c1,\n    ngContentSelectors: _c3,\n    decls: 4,\n    vars: 0,\n    consts: [[\"dropdownTemplate\", \"\"]],\n    template: function MdbDropdownDirective_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵtemplate(2, MdbDropdownDirective_ng_template_2_Template, 2, 2, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('fade', [state('visible', style({\n        opacity: 1\n      })), state('hidden', style({\n        opacity: 0\n      })), transition('visible => hidden', animate('150ms linear')), transition('hidden => visible', [style({\n        opacity: 0\n      }), animate('150ms linear')])])]\n    },\n    changeDetection: 0\n  });\n  return MdbDropdownDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbDropdownModule = /*#__PURE__*/(() => {\n  class MdbDropdownModule {}\n\n  MdbDropdownModule.ɵfac = function MdbDropdownModule_Factory(t) {\n    return new (t || MdbDropdownModule)();\n  };\n\n  MdbDropdownModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbDropdownModule\n  });\n  MdbDropdownModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, OverlayModule]]\n  });\n  return MdbDropdownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbDropdownModule, {\n    declarations: function () {\n      return [MdbDropdownDirective, MdbDropdownToggleDirective, MdbDropdownMenuDirective];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule];\n    },\n    exports: function () {\n      return [MdbDropdownDirective, MdbDropdownToggleDirective, MdbDropdownMenuDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbDropdownDirective, MdbDropdownMenuDirective, MdbDropdownModule, MdbDropdownToggleDirective }; //# sourceMappingURL=mdb-angular-ui-kit-dropdown.js.map","map":null,"metadata":{},"sourceType":"module"}