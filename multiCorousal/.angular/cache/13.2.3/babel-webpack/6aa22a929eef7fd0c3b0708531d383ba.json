{"ast":null,"code":"import { TemplateRef, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, EventEmitter, Directive, ElementRef, Output, NgModule } from '@angular/core';\nimport { OverlayConfig, Overlay, OverlayPositionBuilder, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\n\nfunction MdbPopoverComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.title, \" \");\n  }\n}\n\nfunction MdbPopoverComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵelementContainer(1, 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.content);\n  }\n}\n\nfunction MdbPopoverComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r2.content, \" \");\n  }\n}\n\nlet MdbPopoverComponent = /*#__PURE__*/(() => {\n  class MdbPopoverComponent {\n    constructor(_cdRef) {\n      this._cdRef = _cdRef;\n      this._hidden = new Subject();\n      this.animationState = 'hidden';\n    }\n\n    get isContentTemplate() {\n      return this.content instanceof TemplateRef;\n    }\n\n    markForCheck() {\n      this._cdRef.markForCheck();\n    }\n\n    onAnimationEnd(event) {\n      if (event.toState === 'hidden') {\n        this._hidden.next();\n      }\n    }\n\n  }\n\n  MdbPopoverComponent.ɵfac = function MdbPopoverComponent_Factory(t) {\n    return new (t || MdbPopoverComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MdbPopoverComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbPopoverComponent,\n    selectors: [[\"mdb-popover\"]],\n    inputs: {\n      title: \"title\",\n      content: \"content\",\n      animation: \"animation\"\n    },\n    decls: 4,\n    vars: 5,\n    consts: [[1, \"popover\"], [\"class\", \"popover-header\", 4, \"ngIf\"], [\"class\", \"popover-body\", 4, \"ngIf\"], [1, \"popover-header\"], [1, \"popover-body\"], [3, \"ngTemplateOutlet\"]],\n    template: function MdbPopoverComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@fade.done\", function MdbPopoverComponent_Template_div_animation_fade_done_0_listener($event) {\n          return ctx.onAnimationEnd($event);\n        });\n        ɵngcc0.ɵɵtemplate(1, MdbPopoverComponent_div_1_Template, 2, 1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, MdbPopoverComponent_div_2_Template, 2, 1, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, MdbPopoverComponent_div_3_Template, 2, 1, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"@fade\", ctx.animationState)(\"@.disabled\", !ctx.animation);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.title);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isContentTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isContentTemplate);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('fade', [state('visible', style({\n        opacity: 1\n      })), state('hidden', style({\n        opacity: 0\n      })), transition('visible <=> hidden', animate('150ms linear')), transition(':enter', animate('150ms linear'))])]\n    },\n    changeDetection: 0\n  });\n  return MdbPopoverComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // eslint-disable-next-line @angular-eslint/component-class-suffix\n\n\nlet MdbPopoverDirective = /*#__PURE__*/(() => {\n  class MdbPopoverDirective {\n    constructor(_overlay, _overlayPositionBuilder, _elementRef) {\n      this._overlay = _overlay;\n      this._overlayPositionBuilder = _overlayPositionBuilder;\n      this._elementRef = _elementRef;\n      this.mdbPopover = '';\n      this.mdbPopoverTitle = '';\n      this._popoverDisabled = false;\n      this.placement = 'top';\n      this._animation = false;\n      this.trigger = 'click';\n      this.delayShow = 0;\n      this.delayHide = 0;\n      this.offset = 4;\n      this.popoverShow = new EventEmitter();\n      this.popoverShown = new EventEmitter();\n      this.popoverHide = new EventEmitter();\n      this.popoverHidden = new EventEmitter();\n      this._open = false;\n      this._showTimeout = 0;\n      this._hideTimeout = 0;\n      this._destroy$ = new Subject();\n    }\n\n    get popoverDisabled() {\n      return this._popoverDisabled;\n    }\n\n    set popoverDisabled(value) {\n      this._popoverDisabled = coerceBooleanProperty(value);\n    }\n\n    get animation() {\n      return this._animation;\n    }\n\n    set animation(value) {\n      this._animation = coerceBooleanProperty(value);\n    }\n\n    ngOnInit() {\n      if (this.popoverDisabled) {\n        return;\n      }\n\n      this._bindTriggerEvents();\n    }\n\n    ngOnDestroy() {\n      if (this._open) {\n        this.hide();\n      }\n\n      this._destroy$.next();\n\n      this._destroy$.complete();\n    }\n\n    _bindTriggerEvents() {\n      const triggers = this.trigger.split(' ');\n      triggers.forEach(trigger => {\n        if (trigger === 'click') {\n          fromEvent(this._elementRef.nativeElement, trigger).pipe(takeUntil(this._destroy$)).subscribe(() => this.toggle());\n        } else if (trigger !== 'manual') {\n          const evIn = trigger === 'hover' ? 'mouseenter' : 'focusin';\n          const evOut = trigger === 'hover' ? 'mouseleave' : 'focusout';\n          fromEvent(this._elementRef.nativeElement, evIn).pipe(takeUntil(this._destroy$)).subscribe(() => this.show());\n          fromEvent(this._elementRef.nativeElement, evOut).pipe(takeUntil(this._destroy$)).subscribe(() => this.hide());\n        }\n      });\n    }\n\n    _createOverlayConfig() {\n      const positionStrategy = this._overlayPositionBuilder.flexibleConnectedTo(this._elementRef).withPositions(this._getPosition());\n\n      const overlayConfig = new OverlayConfig({\n        hasBackdrop: false,\n        scrollStrategy: this._overlay.scrollStrategies.reposition(),\n        positionStrategy\n      });\n      return overlayConfig;\n    }\n\n    _createOverlay() {\n      this._overlayRef = this._overlay.create(this._createOverlayConfig());\n    }\n\n    _getPosition() {\n      let position;\n      const positionTop = {\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetY: -this.offset\n      };\n      const positionBottom = {\n        originX: 'center',\n        originY: 'bottom',\n        overlayX: 'center',\n        overlayY: 'top',\n        offsetY: this.offset\n      };\n      const positionRight = {\n        originX: 'end',\n        originY: 'center',\n        overlayX: 'start',\n        overlayY: 'center',\n        offsetX: this.offset\n      };\n      const positionLeft = {\n        originX: 'start',\n        originY: 'center',\n        overlayX: 'end',\n        overlayY: 'center',\n        offsetX: -this.offset\n      };\n\n      switch (this.placement) {\n        case 'top':\n          position = [positionTop, positionBottom];\n          break;\n\n        case 'bottom':\n          position = [positionBottom, positionTop];\n          break;\n\n        case 'left':\n          position = [positionLeft, positionRight, positionTop, positionBottom];\n          break;\n\n        case 'right':\n          position = [positionRight, positionLeft, positionTop, positionBottom];\n          break;\n\n        default:\n          break;\n      }\n\n      return position;\n    }\n\n    show() {\n      if (this._hideTimeout) {\n        this._overlayRef.detach();\n\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n      }\n\n      this._createOverlay();\n\n      if (this._hideTimeout) {\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n      }\n\n      this._showTimeout = setTimeout(() => {\n        const tooltipPortal = new ComponentPortal(MdbPopoverComponent);\n        this.popoverShow.emit(this);\n        this._open = true;\n        this._tooltipRef = this._overlayRef.attach(tooltipPortal);\n        this._tooltipRef.instance.content = this.template || this.mdbPopover;\n        this._tooltipRef.instance.title = this.mdbPopoverTitle;\n        this._tooltipRef.instance.animation = this.animation;\n        this._tooltipRef.instance.animationState = 'visible';\n\n        this._tooltipRef.instance.markForCheck();\n\n        this.popoverShown.emit(this);\n      }, this.delayShow);\n    }\n\n    hide() {\n      if (this._showTimeout) {\n        clearTimeout(this._showTimeout);\n        this._showTimeout = null;\n      } else {\n        return;\n      }\n\n      this._hideTimeout = setTimeout(() => {\n        this.popoverHide.emit(this);\n\n        if (!this._tooltipRef) {\n          this._overlayRef.detach();\n\n          this._open = false;\n          this.popoverHidden.emit(this);\n        } else {\n          this._tooltipRef.instance._hidden.pipe(first()).subscribe(() => {\n            this._overlayRef.detach();\n\n            this._open = false;\n            this.popoverHidden.emit(this);\n          });\n\n          this._tooltipRef.instance.animationState = 'hidden';\n\n          this._tooltipRef.instance.markForCheck();\n        }\n      }, this.delayHide);\n    }\n\n    toggle() {\n      if (this._open) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n\n  }\n\n  MdbPopoverDirective.ɵfac = function MdbPopoverDirective_Factory(t) {\n    return new (t || MdbPopoverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OverlayPositionBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdbPopoverDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbPopoverDirective,\n    selectors: [[\"\", \"mdbPopover\", \"\"]],\n    inputs: {\n      mdbPopover: \"mdbPopover\",\n      mdbPopoverTitle: \"mdbPopoverTitle\",\n      placement: \"placement\",\n      trigger: \"trigger\",\n      delayShow: \"delayShow\",\n      delayHide: \"delayHide\",\n      offset: \"offset\",\n      popoverDisabled: \"popoverDisabled\",\n      animation: \"animation\",\n      template: \"template\"\n    },\n    outputs: {\n      popoverShow: \"popoverShow\",\n      popoverShown: \"popoverShown\",\n      popoverHide: \"popoverHide\",\n      popoverHidden: \"popoverHidden\"\n    },\n    exportAs: [\"mdbPopover\"]\n  });\n  return MdbPopoverDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbPopoverModule = /*#__PURE__*/(() => {\n  class MdbPopoverModule {}\n\n  MdbPopoverModule.ɵfac = function MdbPopoverModule_Factory(t) {\n    return new (t || MdbPopoverModule)();\n  };\n\n  MdbPopoverModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbPopoverModule\n  });\n  MdbPopoverModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, OverlayModule]]\n  });\n  return MdbPopoverModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbPopoverModule, {\n    declarations: function () {\n      return [MdbPopoverDirective, MdbPopoverComponent];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule];\n    },\n    exports: function () {\n      return [MdbPopoverDirective, MdbPopoverComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbPopoverDirective, MdbPopoverModule, MdbPopoverComponent as ɵa }; //# sourceMappingURL=mdb-angular-ui-kit-popover.js.map","map":null,"metadata":{},"sourceType":"module"}