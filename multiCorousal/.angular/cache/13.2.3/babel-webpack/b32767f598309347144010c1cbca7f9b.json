{"ast":null,"code":"import { EventEmitter, Directive, ElementRef, Renderer2, HostBinding, Output, Input, NgModule } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nconst TRANSITION_TIME = 350; // eslint-disable-next-line @angular-eslint/component-class-suffix\n\nlet MdbCollapseDirective = /*#__PURE__*/(() => {\n  class MdbCollapseDirective {\n    constructor(_elementRef, _renderer) {\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this.collapseClass = true;\n      this.collapseShow = new EventEmitter();\n      this.collapseShown = new EventEmitter();\n      this.collapseHide = new EventEmitter();\n      this.collapseHidden = new EventEmitter();\n      this._collapsed = true;\n      this._isTransitioning = false;\n    }\n\n    set collapsed(collapsed) {\n      if (collapsed !== this._collapsed) {\n        collapsed ? this.hide() : this.show();\n        this._collapsed = collapsed;\n      }\n    }\n\n    get collapsed() {\n      return this._collapsed;\n    }\n\n    get host() {\n      return this._elementRef.nativeElement;\n    }\n\n    show() {\n      if (this._isTransitioning || !this.collapsed) {\n        return;\n      }\n\n      this.collapseShow.emit(this);\n\n      this._renderer.removeClass(this.host, 'collapse');\n\n      this._renderer.addClass(this.host, 'collapsing');\n\n      this._renderer.setStyle(this.host, 'height', '0px');\n\n      this._isTransitioning = true;\n      const scrollHeight = this.host.scrollHeight;\n      fromEvent(this.host, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._isTransitioning = false;\n        this.collapsed = false;\n\n        this._renderer.removeClass(this.host, 'collapsing');\n\n        this._renderer.addClass(this.host, 'collapse');\n\n        this._renderer.addClass(this.host, 'show');\n\n        this._renderer.removeStyle(this.host, 'height');\n\n        this.collapseShown.emit(this);\n      });\n\n      this._emulateTransitionEnd(this.host, TRANSITION_TIME);\n\n      this._renderer.setStyle(this.host, 'height', `${scrollHeight}px`);\n    }\n\n    hide() {\n      if (this._isTransitioning || this.collapsed) {\n        return;\n      }\n\n      this.collapseHide.emit(this);\n      const hostHeight = this.host.getBoundingClientRect().height;\n\n      this._renderer.setStyle(this.host, 'height', `${hostHeight}px`);\n\n      this._reflow(this.host);\n\n      this._renderer.addClass(this.host, 'collapsing');\n\n      this._renderer.removeClass(this.host, 'collapse');\n\n      this._renderer.removeClass(this.host, 'show');\n\n      this._isTransitioning = true;\n      fromEvent(this.host, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._renderer.removeClass(this.host, 'collapsing');\n\n        this._renderer.addClass(this.host, 'collapse');\n\n        this._isTransitioning = false;\n        this.collapsed = true;\n        this.collapseHidden.emit(this);\n      });\n\n      this._renderer.removeStyle(this.host, 'height');\n\n      this._emulateTransitionEnd(this.host, TRANSITION_TIME);\n    }\n\n    toggle() {\n      if (this._isTransitioning) {\n        return;\n      }\n\n      this.collapsed = !this.collapsed;\n      this.collapsed ? this.hide() : this.show();\n    }\n\n    _reflow(element) {\n      return element.offsetHeight;\n    }\n\n    _emulateTransitionEnd(element, duration) {\n      let eventEmitted = false;\n      const durationPadding = 5;\n      const emulatedDuration = duration + durationPadding;\n      fromEvent(element, 'transitionend').pipe(take(1)).subscribe(() => {\n        eventEmitted = true;\n      });\n      setTimeout(() => {\n        if (!eventEmitted) {\n          element.dispatchEvent(new Event('transitionend'));\n        }\n      }, emulatedDuration);\n    }\n\n  }\n\n  MdbCollapseDirective.ɵfac = function MdbCollapseDirective_Factory(t) {\n    return new (t || MdbCollapseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  MdbCollapseDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbCollapseDirective,\n    selectors: [[\"\", \"mdbCollapse\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MdbCollapseDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"collapse\", ctx.collapseClass);\n      }\n    },\n    inputs: {\n      collapsed: \"collapsed\"\n    },\n    outputs: {\n      collapseShow: \"collapseShow\",\n      collapseShown: \"collapseShown\",\n      collapseHide: \"collapseHide\",\n      collapseHidden: \"collapseHidden\"\n    },\n    exportAs: [\"mdbCollapse\"]\n  });\n  return MdbCollapseDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbCollapseModule = /*#__PURE__*/(() => {\n  class MdbCollapseModule {}\n\n  MdbCollapseModule.ɵfac = function MdbCollapseModule_Factory(t) {\n    return new (t || MdbCollapseModule)();\n  };\n\n  MdbCollapseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbCollapseModule\n  });\n  MdbCollapseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return MdbCollapseModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbCollapseModule, {\n    declarations: [MdbCollapseDirective],\n    exports: [MdbCollapseDirective]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbCollapseDirective, MdbCollapseModule }; //# sourceMappingURL=mdb-angular-ui-kit-collapse.js.map","map":null,"metadata":{},"sourceType":"module"}