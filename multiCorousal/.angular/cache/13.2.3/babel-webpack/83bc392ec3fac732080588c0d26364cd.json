{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Renderer2, ElementRef, Input, Component, HostBinding, NgModule } from '@angular/core';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"*\"];\nlet MdbValidateDirective = /*#__PURE__*/(() => {\n  class MdbValidateDirective {\n    constructor(renderer, _elementRef) {\n      this.renderer = renderer;\n      this._elementRef = _elementRef;\n      this._validate = true;\n      this._validateSuccess = true;\n      this._validateError = true;\n    }\n\n    get mdbValidate() {\n      return this._mdbValidate;\n    }\n\n    set mdbValidate(value) {\n      this._mdbValidate = coerceBooleanProperty(value);\n    }\n\n    get validate() {\n      return this._validate;\n    }\n\n    set validate(value) {\n      this._validate = coerceBooleanProperty(value);\n      this.updateErrorClass();\n      this.updateSuccessClass();\n    }\n\n    get validateSuccess() {\n      return this._validateSuccess;\n    }\n\n    set validateSuccess(value) {\n      this._validateSuccess = coerceBooleanProperty(value);\n      this.updateSuccessClass();\n    }\n\n    get validateError() {\n      return this._validateError;\n    }\n\n    set validateError(value) {\n      this._validateError = coerceBooleanProperty(value);\n      this.updateErrorClass();\n      this.updateSuccessClass();\n    }\n\n    updateSuccessClass() {\n      if (this.validate && this.validateSuccess) {\n        this.renderer.addClass(this._elementRef.nativeElement, 'validate-success');\n      } else {\n        this.renderer.removeClass(this._elementRef.nativeElement, 'validate-success');\n      }\n    }\n\n    updateErrorClass() {\n      if (this.validate && this.validateError) {\n        this.renderer.addClass(this._elementRef.nativeElement, 'validate-error');\n      } else {\n        this.renderer.removeClass(this._elementRef.nativeElement, 'validate-error');\n      }\n    }\n\n    ngOnInit() {\n      this.updateSuccessClass();\n      this.updateErrorClass();\n    }\n\n  }\n\n  MdbValidateDirective.ɵfac = function MdbValidateDirective_Factory(t) {\n    return new (t || MdbValidateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdbValidateDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbValidateDirective,\n    selectors: [[\"\", \"mdbValidate\", \"\"]],\n    inputs: {\n      mdbValidate: \"mdbValidate\",\n      validate: \"validate\",\n      validateSuccess: \"validateSuccess\",\n      validateError: \"validateError\"\n    }\n  });\n  return MdbValidateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet defaultIdNumber$1 = 0; // eslint-disable-next-line @angular-eslint/component-class-suffix\n\nlet MdbErrorDirective = /*#__PURE__*/(() => {\n  class MdbErrorDirective {\n    constructor(_elementRef, renderer) {\n      this._elementRef = _elementRef;\n      this.renderer = renderer;\n      this.id = `mdb-error-${defaultIdNumber$1++}`;\n      this.errorMsg = true;\n      this.messageId = this.id;\n      this._destroy$ = new Subject();\n    }\n\n    _getClosestEl(el, selector) {\n      for (; el && el !== document; el = el.parentNode) {\n        if (el.matches && el.matches(selector)) {\n          return el;\n        }\n      }\n\n      return null;\n    }\n\n    ngOnInit() {\n      const textarea = this._getClosestEl(this._elementRef.nativeElement, 'textarea');\n\n      if (textarea) {\n        let height = textarea.offsetHeight + 4 + 'px';\n        this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        fromEvent(textarea, 'keyup').pipe(takeUntil(this._destroy$)).subscribe(() => {\n          height = textarea.offsetHeight + 4 + 'px';\n          this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      this._destroy$.next();\n\n      this._destroy$.complete();\n    }\n\n  }\n\n  MdbErrorDirective.ɵfac = function MdbErrorDirective_Factory(t) {\n    return new (t || MdbErrorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  MdbErrorDirective.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbErrorDirective,\n    selectors: [[\"mdb-error\"]],\n    hostVars: 3,\n    hostBindings: function MdbErrorDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.messageId);\n        ɵngcc0.ɵɵclassProp(\"error-message\", ctx.errorMsg);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MdbErrorDirective_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return MdbErrorDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet defaultIdNumber = 0; // eslint-disable-next-line @angular-eslint/component-class-suffix\n\nlet MdbSuccessDirective = /*#__PURE__*/(() => {\n  class MdbSuccessDirective {\n    constructor(_elementRef, renderer) {\n      this._elementRef = _elementRef;\n      this.renderer = renderer;\n      this.id = `mdb-success-${defaultIdNumber++}`;\n      this.successMsg = true;\n      this.messageId = this.id;\n      this._destroy$ = new Subject();\n    }\n\n    _getClosestEl(el, selector) {\n      for (; el && el !== document; el = el.parentNode) {\n        if (el.matches && el.matches(selector)) {\n          return el;\n        }\n      }\n\n      return null;\n    }\n\n    ngOnInit() {\n      const textarea = this._getClosestEl(this._elementRef.nativeElement, 'textarea');\n\n      if (textarea) {\n        let height = textarea.offsetHeight + 4 + 'px';\n        this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        fromEvent(textarea, 'keyup').pipe(takeUntil(this._destroy$)).subscribe(() => {\n          height = textarea.offsetHeight + 4 + 'px';\n          this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      this._destroy$.next();\n\n      this._destroy$.complete();\n    }\n\n  }\n\n  MdbSuccessDirective.ɵfac = function MdbSuccessDirective_Factory(t) {\n    return new (t || MdbSuccessDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  MdbSuccessDirective.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbSuccessDirective,\n    selectors: [[\"mdb-success\"]],\n    hostVars: 3,\n    hostBindings: function MdbSuccessDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.messageId);\n        ɵngcc0.ɵɵclassProp(\"success-message\", ctx.successMsg);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MdbSuccessDirective_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return MdbSuccessDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbValidationModule = /*#__PURE__*/(() => {\n  class MdbValidationModule {}\n\n  MdbValidationModule.ɵfac = function MdbValidationModule_Factory(t) {\n    return new (t || MdbValidationModule)();\n  };\n\n  MdbValidationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbValidationModule\n  });\n  MdbValidationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MdbValidationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbValidationModule, {\n    declarations: function () {\n      return [MdbErrorDirective, MdbSuccessDirective, MdbValidateDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [MdbErrorDirective, MdbSuccessDirective, MdbValidateDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbErrorDirective, MdbSuccessDirective, MdbValidateDirective, MdbValidationModule }; //# sourceMappingURL=mdb-angular-ui-kit-validation.js.map","map":null,"metadata":{},"sourceType":"module"}