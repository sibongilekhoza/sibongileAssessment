{"ast":null,"code":"import { Subject, fromEvent } from 'rxjs';\nimport { CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Component, ChangeDetectionStrategy, Inject, ElementRef, Renderer2, ViewChild, HostBinding, TemplateRef, Injector, Injectable, ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';\nimport { filter, takeUntil, take } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { OverlayConfig, Overlay, OverlayModule } from '@angular/cdk/overlay';\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nconst _c0 = [\"dialog\"];\n\nfunction MdbModalContainerComponent_ng_template_3_Template(rf, ctx) {}\n\nclass MdbModalConfig {\n  constructor() {\n    this.animation = true;\n    this.backdrop = true;\n    this.ignoreBackdropClick = false;\n    this.keyboard = true;\n    this.modalClass = '';\n    this.containerClass = '';\n    this.data = null;\n  }\n\n}\n\nclass MdbModalRef {\n  constructor(_overlayRef, _container) {\n    this._overlayRef = _overlayRef;\n    this._container = _container;\n    this.onClose$ = new Subject();\n    this.onClose = this.onClose$.asObservable();\n  }\n\n  close(message) {\n    this._container._close();\n\n    setTimeout(() => {\n      this._container._restoreScrollbar();\n\n      this.onClose$.next(message);\n      this.onClose$.complete();\n\n      this._overlayRef.detach();\n\n      this._overlayRef.dispose();\n    }, this._container.MODAL_TRANSITION);\n  }\n\n}\n\nlet MdbModalContainerComponent = /*#__PURE__*/(() => {\n  class MdbModalContainerComponent {\n    constructor(_document, _elementRef, _renderer, _focusTrapFactory) {\n      this._document = _document;\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._destroy$ = new Subject();\n      this.backdropClick$ = new Subject();\n      this.BACKDROP_TRANSITION = 150;\n      this.MODAL_TRANSITION = 200;\n      this.modal = true;\n    }\n\n    get hasAnimation() {\n      return this._config.animation;\n    }\n\n    ngOnInit() {\n      this._updateContainerClass();\n\n      this._renderer.addClass(this._document.body, 'modal-open');\n\n      this._renderer.setStyle(this._document.body, 'padding-right', '15px');\n\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'block');\n\n      this._previouslyFocusedElement = this._document.activeElement;\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n      if (this._config.animation) {\n        setTimeout(() => {\n          this._renderer.addClass(this._elementRef.nativeElement, 'show');\n\n          setTimeout(() => {\n            this._focusTrap.focusInitialElementWhenReady();\n          }, this.MODAL_TRANSITION);\n        }, this.BACKDROP_TRANSITION);\n      } else {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    }\n\n    ngAfterViewInit() {\n      if (!this._config.ignoreBackdropClick) {\n        fromEvent(this._elementRef.nativeElement, 'mousedown').pipe(filter(event => {\n          const target = event.target;\n          const dialog = this.modalDialog.nativeElement;\n          const notDialog = target !== dialog;\n          const notDialogContent = !dialog.contains(target);\n          return notDialog && notDialogContent;\n        }), takeUntil(this._destroy$)).subscribe(event => {\n          this.backdropClick$.next(event);\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      this._previouslyFocusedElement.focus();\n\n      this._focusTrap.destroy();\n\n      this._destroy$.next();\n\n      this._destroy$.complete();\n    }\n\n    _updateContainerClass() {\n      if (this._config.containerClass === '' || this._config.containerClass.length && this._config.containerClass.length === 0) {\n        return;\n      }\n\n      const containerClasses = this._config.containerClass.split(' ');\n\n      containerClasses.forEach(containerClass => {\n        this._renderer.addClass(this._elementRef.nativeElement, containerClass);\n      });\n    }\n\n    _close() {\n      if (this._config.animation) {\n        this._renderer.removeClass(this._elementRef.nativeElement, 'show');\n      } // Pause iframe/video when closing modal\n\n\n      const iframeElements = Array.from(this._elementRef.nativeElement.querySelectorAll('iframe'));\n      const videoElements = Array.from(this._elementRef.nativeElement.querySelectorAll('video'));\n      iframeElements.forEach(iframe => {\n        const srcAttribute = iframe.getAttribute('src');\n\n        this._renderer.setAttribute(iframe, 'src', srcAttribute);\n      });\n      videoElements.forEach(video => {\n        video.pause();\n      });\n    }\n\n    _restoreScrollbar() {\n      this._renderer.removeClass(this._document.body, 'modal-open');\n\n      this._renderer.removeStyle(this._document.body, 'padding-right');\n    }\n\n    attachComponentPortal(portal) {\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n\n    attachTemplatePortal(portal) {\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n\n  }\n\n  MdbModalContainerComponent.ɵfac = function MdbModalContainerComponent_Factory(t) {\n    return new (t || MdbModalContainerComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ConfigurableFocusTrapFactory));\n  };\n\n  MdbModalContainerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbModalContainerComponent,\n    selectors: [[\"mdb-modal-container\"]],\n    viewQuery: function MdbModalContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalDialog = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function MdbModalContainerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"modal\", ctx.modal)(\"fade\", ctx.hasAnimation);\n      }\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[\"dialog\", \"\"], [1, \"modal-content\"], [\"cdkPortalOutlet\", \"\"]],\n    template: function MdbModalContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", null, 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(3, MdbModalContainerComponent_ng_template_3_Template, 0, 0, \"ng-template\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(\"modal-dialog\" + (ctx._config.modalClass ? \" \" + ctx._config.modalClass : \"\"));\n      }\n    },\n    directives: [ɵngcc2.CdkPortalOutlet],\n    encapsulation: 2\n  });\n  return MdbModalContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbModalService = /*#__PURE__*/(() => {\n  class MdbModalService {\n    constructor(_document, _overlay, _injector, _cfr) {\n      this._document = _document;\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._cfr = _cfr;\n    }\n\n    open(componentOrTemplateRef, config) {\n      const defaultConfig = new MdbModalConfig();\n      config = config ? Object.assign(defaultConfig, config) : defaultConfig;\n\n      const overlayRef = this._createOverlay(config);\n\n      const container = this._createContainer(overlayRef, config);\n\n      const modalRef = this._createContent(componentOrTemplateRef, container, overlayRef, config);\n\n      this._registerListeners(modalRef, config, container);\n\n      return modalRef;\n    }\n\n    _createOverlay(config) {\n      const overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n\n    _getOverlayConfig(modalConfig) {\n      const config = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: this._overlay.scrollStrategies.noop(),\n        hasBackdrop: modalConfig.backdrop,\n        backdropClass: 'mdb-backdrop'\n      });\n      return config;\n    }\n\n    _createContainer(overlayRef, config) {\n      const portal = new ComponentPortal(MdbModalContainerComponent, null, this._injector, this._cfr);\n      const containerRef = overlayRef.attach(portal);\n      containerRef.instance._config = config;\n      return containerRef.instance;\n    }\n\n    _createContent(componentOrTemplate, container, overlayRef, config) {\n      const modalRef = new MdbModalRef(overlayRef, container);\n\n      if (componentOrTemplate instanceof TemplateRef) {\n        container.attachTemplatePortal(new TemplatePortal(componentOrTemplate, null, {\n          $implicit: config.data,\n          modalRef\n        }));\n      } else {\n        const injector = this._createInjector(config, modalRef, container);\n\n        const contentRef = container.attachComponentPortal(new ComponentPortal(componentOrTemplate, config.viewContainerRef, injector));\n\n        if (config.data) {\n          Object.assign(contentRef.instance, Object.assign({}, config.data));\n        }\n      }\n\n      return modalRef;\n    }\n\n    _createInjector(config, modalRef, container) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n      // content are created out of the same `ViewContainerRef` and as such, are siblings\n      // for injector purposes. To allow the hierarchy that is expected, the dialog\n      // container is explicitly provided in the injector.\n\n      const providers = [{\n        provide: MdbModalContainerComponent,\n        useValue: container\n      }, {\n        provide: MdbModalRef,\n        useValue: modalRef\n      }];\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers\n      });\n    }\n\n    _registerListeners(modalRef, config, container) {\n      container.backdropClick$.pipe(take(1)).subscribe(() => {\n        modalRef.close();\n      });\n\n      if (config.keyboard) {\n        fromEvent(container._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n          return event.key === 'Escape';\n        }), take(1)).subscribe(() => {\n          modalRef.close();\n        });\n      }\n    }\n\n  }\n\n  MdbModalService.ɵfac = function MdbModalService_Factory(t) {\n    return new (t || MdbModalService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver));\n  };\n\n  MdbModalService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MdbModalService,\n    factory: MdbModalService.ɵfac\n  });\n  return MdbModalService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbModalModule = /*#__PURE__*/(() => {\n  class MdbModalModule {}\n\n  MdbModalModule.ɵfac = function MdbModalModule_Factory(t) {\n    return new (t || MdbModalModule)();\n  };\n\n  MdbModalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbModalModule\n  });\n  MdbModalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MdbModalService],\n    imports: [[OverlayModule, PortalModule]]\n  });\n  return MdbModalModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbModalModule, {\n    declarations: function () {\n      return [MdbModalContainerComponent];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule];\n    },\n    exports: function () {\n      return [MdbModalContainerComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbModalConfig, MdbModalContainerComponent, MdbModalModule, MdbModalRef, MdbModalService }; //# sourceMappingURL=mdb-angular-ui-kit-modal.js.map","map":null,"metadata":{},"sourceType":"module"}