{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Input, HostBinding, forwardRef, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject, from } from 'rxjs';\nimport { startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nlet MdbRadioDirective = /*#__PURE__*/(() => {\n  class MdbRadioDirective {\n    constructor() {\n      this._checked = false;\n      this._value = null;\n      this._disabled = false;\n    }\n\n    get name() {\n      return this._name;\n    }\n\n    set name(value) {\n      this._name = value;\n    }\n\n    get checked() {\n      return this._checked;\n    }\n\n    set checked(value) {\n      this._checked = coerceBooleanProperty(value);\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      this._value = value;\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    get isDisabled() {\n      return this._disabled;\n    }\n\n    get isChecked() {\n      return this._checked;\n    }\n\n    get nameAttr() {\n      return this.name;\n    }\n\n    _updateName(value) {\n      this._name = value;\n    }\n\n    _updateChecked(value) {\n      this._checked = value;\n    }\n\n    _updateDisabledState(value) {\n      this._disabled = value;\n    }\n\n  }\n\n  MdbRadioDirective.ɵfac = function MdbRadioDirective_Factory(t) {\n    return new (t || MdbRadioDirective)();\n  };\n\n  MdbRadioDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbRadioDirective,\n    selectors: [[\"\", \"mdbRadio\", \"\"]],\n    hostVars: 3,\n    hostBindings: function MdbRadioDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.isDisabled)(\"checked\", ctx.isChecked);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.nameAttr);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      checked: \"checked\",\n      value: \"value\",\n      disabled: \"disabled\"\n    }\n  });\n  return MdbRadioDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst MDB_RADIO_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => MdbRadioGroupDirective),\n  multi: true\n};\nlet MdbRadioGroupDirective = /*#__PURE__*/(() => {\n  class MdbRadioGroupDirective {\n    constructor() {\n      this._disabled = false;\n      this._destroy$ = new Subject();\n\n      this.onChange = _ => {};\n\n      this.onTouched = () => {};\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      this._value = value;\n\n      if (this.radios) {\n        this._updateChecked();\n      }\n    }\n\n    get name() {\n      return this._name;\n    }\n\n    set name(name) {\n      this._name = name;\n\n      if (this.radios) {\n        this._updateNames();\n      }\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(disabled) {\n      this._disabled = disabled;\n\n      if (this.radios) {\n        this._updateDisabled();\n      }\n    }\n\n    ngAfterContentInit() {\n      this._updateNames();\n\n      this._updateDisabled();\n\n      this.radios.changes.pipe(startWith(this.radios), switchMap(radios => from(Promise.resolve(radios))), takeUntil(this._destroy$)).subscribe(() => this._updateRadiosState());\n    }\n\n    ngOnDestroy() {\n      this._destroy$.next();\n\n      this._destroy$.complete();\n    }\n\n    _updateRadiosState() {\n      this._updateNames();\n\n      this._updateChecked();\n\n      this._updateDisabled();\n    }\n\n    _updateNames() {\n      this.radios.forEach(radio => radio._updateName(this.name));\n    }\n\n    _updateChecked() {\n      this.radios.forEach(radio => {\n        const isChecked = radio.value === this._value;\n\n        radio._updateChecked(isChecked);\n      });\n    }\n\n    _updateDisabled() {\n      this.radios.forEach(radio => radio._updateDisabledState(this._disabled));\n    } // Control value accessor methods\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this._disabled = isDisabled;\n\n      this._updateDisabled();\n    }\n\n    writeValue(value) {\n      this.value = value;\n    }\n\n  }\n\n  MdbRadioGroupDirective.ɵfac = function MdbRadioGroupDirective_Factory(t) {\n    return new (t || MdbRadioGroupDirective)();\n  };\n\n  MdbRadioGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbRadioGroupDirective,\n    selectors: [[\"\", \"mdbRadioGroup\", \"\"]],\n    contentQueries: function MdbRadioGroupDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdbRadioDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radios = _t);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      name: \"name\",\n      disabled: \"disabled\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MDB_RADIO_GROUP_VALUE_ACCESSOR])]\n  });\n  return MdbRadioGroupDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbRadioModule = /*#__PURE__*/(() => {\n  class MdbRadioModule {}\n\n  MdbRadioModule.ɵfac = function MdbRadioModule_Factory(t) {\n    return new (t || MdbRadioModule)();\n  };\n\n  MdbRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbRadioModule\n  });\n  MdbRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return MdbRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbRadioModule, {\n    declarations: function () {\n      return [MdbRadioDirective, MdbRadioGroupDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [MdbRadioDirective, MdbRadioGroupDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MDB_RADIO_GROUP_VALUE_ACCESSOR, MdbRadioDirective, MdbRadioGroupDirective, MdbRadioModule }; //# sourceMappingURL=mdb-angular-ui-kit-radio.js.map","map":null,"metadata":{},"sourceType":"module"}